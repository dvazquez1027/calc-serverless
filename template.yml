# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: SAM template for calc-serverless.

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: AWS::Serverless-2016-10-31

# Shared configuration for all resources, more in
# https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    # The PermissionsBoundary allows users to safely develop with their function's permissions constrained
    # to their current application. All the functions and roles in this application have to include it and
    # it has to be manually updated when you add resources to your application.
    # More information in https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html
    PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AppId}-${AWS::Region}-PermissionsBoundary'

Parameters:
  AppId:
    Type: String

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # Security group that will be used in functions VPC config.
  CalcFunctionSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Calculator functions security group"
      VpcId: vpc-79fb3b04

  CalcApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody:
        'Fn::Transform':
          Name: AWS::Include
          Parameters:
            Location: s3://calc-serverless-api/calc-api.yml
      Description: "Calculator Service API"
      StageName: dev
      EndpointConfiguration:
        Type: REGIONAL

  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllCalculators:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/get-all-calculators.getAllCalculatorsHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 60
      Description: Get all calculators from the Calculators table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the Calculator
        - DynamoDBCrudPolicy:
            TableName: !Ref Calculators
      VpcConfig:
        SecurityGroupIds:
          - !Ref CalcFunctionSecurityGroup
        SubnetIds:
          - subnet-c07ecaa6
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          CALCULATORS_TABLE: !Ref Calculators
      Events:
        Api:
          Type: Api
          Properties:
            Path: /calculator
            Method: GET
            RestApiId:
              Ref: CalcApi
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-by-id.js
  getCalculatorById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/get-calculator-by-id.getCalculatorByIdHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 60
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the Calculator
        - DynamoDBCrudPolicy:
            TableName: !Ref Calculators
      VpcConfig:
        SecurityGroupIds:
          - !Ref CalcFunctionSecurityGroup
        SubnetIds:
          - subnet-c07ecaa6
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          CALCULATORS_TABLE: !Ref Calculators
      Events:
        getCalculatorById:
          Type: Api
          Properties:
            Path: /calculator/{id}
            Method: GET
            RestApiId:
              Ref: CalcApi
        doCalculationOnCalculatorWithId:
          Type: Api
          Properties:
            Path: /calculator/{id}
            Method: PUT
            RestApiId:
              Ref: CalcApi
            RequestModel:
              Model: Operations
              Required: true
        deleteCalculator:
          Type: Api
          Properties:
            Path: /calculator/{id}
            Method: DELETE
            RestApiId:
              Ref: CalcApi
        
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  createCalculator:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/create-calculator.createCalculatorHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 60
      Description: Creates a calculator in the Calculators table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the Calculator
        - DynamoDBCrudPolicy:
            TableName: !Ref Calculators
      VpcConfig:
        SecurityGroupIds:
          - !Ref CalcFunctionSecurityGroup
        SubnetIds:
          - subnet-c07ecaa6
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          CALCULATORS_TABLE: !Ref Calculators
      Events:
        Api:
          Type: Api
          Properties:
            Path: /calculator
            Method: POST
            RestApiId:
              Ref: CalcApi
            RequestModel:
              Model: Calculator
              Required: true

  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  Calculators:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  #
  # ElastiCache
  #
  CalculatorsCache:
    Type: "AWS::ElastiCache::CacheCluster"
    Properties:
      Engine: "memcached"
      CacheNodeType: "cache.t2.micro"
      NumCacheNodes: 1
      VpcSecurityGroupIds:
        - !GetAtt CalculatorsCacheSecurityGroup.GroupId
      CacheSubnetGroupName: !Ref CalculatorsCacheSubnetGroup

  CalculatorsCacheSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Calculator Cache security group"
      VpcId: vpc-79fb3b04
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 11211
          ToPort: 11211
          SourceSecurityGroupId: !Ref CalcFunctionSecurityGroup

  CalculatorsCacheSubnetGroup:
    Type: "AWS::ElastiCache::SubnetGroup"
    Properties:
      Description: "Calculator Cache subnet group"
      SubnetIds:
        - subnet-c07ecaa6
